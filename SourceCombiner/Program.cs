using System.Diagnostics;
using System.Text;
using System.Text.RegularExpressions;
using Microsoft.Build.Evaluation;

List<string> SOURCE_FILES_TO_IGNORE = new List<string>
{
    "AssemblyInfo.cs"
};

if (args == null || args.Length < 2)
{
    Console.WriteLine("You must provide at least 2 arguments. The first is the solution file path and the second is the output file path.");
    return;
}

var projectFilePath = args[0];
var outputFilePath = args[1];

var openFile = false;
if (args.Length > 2)
{
    bool.TryParse(args[2], out openFile);
}

SetMsBuildExePath();

var filesToParse = GetSourceFileNames(projectFilePath);
var namespaces = GetUniqueNamespaces(filesToParse);

var outputSource = GenerateCombinedSource(namespaces, filesToParse);
File.WriteAllText(outputFilePath, outputSource);

if (openFile)
{
    Process.Start(outputFilePath);
}

string GenerateCombinedSource(List<string> namespaces, List<string> files)
{
    var sb = new StringBuilder();

    sb.AppendLine(@"/*");
    sb.AppendLine($" * File generated by SourceCombiner.exe using {files.Count} source files.");
    sb.AppendLine($" * Created On: {DateTime.Now}");
    sb.AppendLine(@"*/");

    foreach (var ns in namespaces.OrderBy(s => s))
    {
        sb.AppendLine("using " + ns + ";");
    }

    foreach (var file in files)
    {
        IEnumerable<string> sourceLines = File.ReadAllLines(file);
        sb.AppendLine(@"//*** SourceCombiner -> original file " + Path.GetFileName(file) + " ***");
        var openingTag = "using ";
        foreach (var sourceLine in sourceLines)
        {
            var trimmedLine = sourceLine.Trim().Replace("  ", " ");
            var isUsingDir = trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";");
            if (!string.IsNullOrWhiteSpace(sourceLine) && !isUsingDir)
            {
                sb.AppendLine(sourceLine);
            }
        }
    }

    return sb.ToString();
}

List<string> GetSourceFileNames(string projectFilePath)
{
    var files = new List<string>();

    var project = new Project(projectFilePath);
    foreach (var item in project.AllEvaluatedItems.Where(item => item.ItemType == "Compile"))
    {
        if (!SOURCE_FILES_TO_IGNORE.Contains(Path.GetFileName(item.EvaluatedInclude)))
        {
            var projectFolder = Path.GetDirectoryName(project.FullPath);
            var fullPath = Path.Combine(projectFolder, item.EvaluatedInclude);
            files.Add(fullPath);
        }
    }

    return files;
}


List<string> GetUniqueNamespaces(List<string> files)
{
    var names = new List<string>();
    const string openingTag = "using ";
    const int namespaceStartIndex = 6;

    foreach (var file in files)
    {
        IEnumerable<string> sourceLines = File.ReadAllLines(file);

        foreach (var sourceLine in sourceLines)
        {
            var trimmedLine = sourceLine.Trim().Replace("  ", " ");
            if (trimmedLine.StartsWith(openingTag) && trimmedLine.EndsWith(";"))
            {
                var name = trimmedLine.Substring(namespaceStartIndex, trimmedLine.Length - namespaceStartIndex - 1);

                if (!names.Contains(name))
                {
                    names.Add(name);
                }
            }
        }
    }

    return names;
}

void SetMsBuildExePath()
{
    try
    {
        var startInfo = new ProcessStartInfo("dotnet", "--list-sdks")
        {
            RedirectStandardOutput = true
        };

        var process = Process.Start(startInfo);
        process.WaitForExit(1000);

        var output = process.StandardOutput.ReadToEnd();
        var sdkPaths = Regex.Matches(output, "([0-9]+.[0-9]+.[0-9]+) \\[(.*)\\]")
                            .Select(m => System.IO.Path.Combine(m.Groups[2].Value, m.Groups[1].Value, "MSBuild.dll"))
                            .ToList();

        Console.WriteLine("SDK PATHS:\n\t" + string.Join("\n\t", sdkPaths));
        
        var sdkPath = sdkPaths.Last();
        Environment.SetEnvironmentVariable("MSBUILD_EXE_PATH", sdkPath);
    }
    catch (Exception exception)
    {
        Console.Error.Write("Could not set MSBUILD_EXE_PATH: " + exception);
    }
}